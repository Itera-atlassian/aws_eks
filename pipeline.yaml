# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml 
name: $(SourceBranchName)_$(date:yyyyMMdd)$(rev:.r)_$(Build.SourceVersion)

trigger:
- main

pool:
  vmImage: ubuntu-latest


stages:
- stage: StageCI
  displayName: 'Stage CI'
  jobs:
  - job: BuildJob
    displayName: 'Build - Python'
    steps:

    - script: |
        # Configurar Python 3.11.3
        sudo add-apt-repository ppa:deadsnakes/ppa -y
        sudo apt-get update
        sudo apt-get install python3.11 -y
        python3.11 --version
        pip install -r requeriments.txt
      displayName: 'PYTHON: Install python 3.11'

    - script: |
        # Ejecutar pruebas unitarias aqu√≠
        # Por ejemplo, puedes usar pytest para ejecutar tus pruebas
        pip install pytest
        pytest test_main.py -vv
      displayName: 'TEST: Run Unit Tests'

    - task: Bash@3
      displayName: "TAG: define"
      inputs:
        targetType: 'inline'
        script: |
          TAG2=release-$(Build.SourceVersion)
          echo "##vso[task.setvariable variable=tag]$TAG2"

    - script: |
        docker build -t imagename:latest .
        docker images
      displayName: 'IMAGE: create image'

    - task: ECRPushImage@1
      displayName: 'ECR: push image'
      inputs:
        awsCredentials: 'AWS_ECR_TEST'
        regionName: 'us-east-2'
        imageSource: 'imagename'
        sourceImageName: 'imagename'
        sourceImageTag: 'latest'
        repositoryName: 'app-sumatoria'
        pushTag: '$(tag)'




- stage: StageCD
  displayName: 'Stage CD'
  jobs:
  - job: BuildJob
    displayName: 'Deploy to EKS'
    steps:

    - task: Bash@3
      displayName: "TAG: define"
      inputs:
        targetType: 'inline'
        script: |
          TAG2=release-$(Build.SourceVersion)
          echo "##vso[task.setvariable variable=tag]$TAG2"

    - script: |
        set -e
        export PREVIOUS_IMAGE=$(kubectl get deployment app-sumatoria -o=jsonpath='{$.spec.template.spec.containers[:1].image}')
        echo "##vso[task.setvariable variable=previousImage]$PREVIOUS_IMAGE"
      displayName: 'Get current image'

    - task: Bash@3
      displayName: "EKS: manifest"
      inputs:
        targetType: 'inline'
        script: |
          sed -i "s/latest/$(tag)/g" manifest/deployment.yaml
          cat manifest/deployment.yaml


    - task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1
      displayName: 'EKS: apply manifest'
      inputs:
        awsCredentials: 'AWS_ECR_TEST'
        regionName: 'us-east-1'
        scriptType: inline
        inlineScript: |
          aws sts get-caller-identity
          aws eks update-kubeconfig --region us-east-2 --name cluster-eks
          kubectl apply -f manifest/deployment.yaml


    - task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1
      displayName: 'EKS: validate deployment'
      inputs:
        awsCredentials: 'AWS_ECR_TEST'
        regionName: 'us-east-1'
        scriptType: inline
        inlineScript: |
          echo 'Using identity'
          aws sts get-caller-identity
          aws eks update-kubeconfig --region us-east-2 --name cluster-eks
          kubectl rollout status deploy app-sumatoria -n dev --timeout=60s
      continueOnError: true

    - script: |
        kubectl get pods
        UNHEALTHY=$(kubectl get pods -n dev | grep app-sumatoria | grep -c '1/0')
        echo $UNHEALTHY
        if [ "$UNHEALTHY" -ne "$(kubectl get pods | wc -l)" ]; then
          echo "Rolling back to previous image: $(PREVIOUS_IMAGE)"
          kubectl set image deploy app-sumatoria app-sumatoria=$(PREVIOUS_IMAGE) -n dev
        fi
      displayName: 'Check pod health and rollback if necessary'